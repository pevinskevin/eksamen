### Variables
@baseUrl = http://localhost:8080/api
@contentType = application/json
@cryptoId = 1

### Login first to get session cookies for authenticated requests
# @name login
POST {{baseUrl}}/login
Content-Type: {{contentType}}

{
  "email": "admin@test.com",
  "password": "test1234"
}

### GET CRYPTOCURRENCIES TESTS ###

### 1. Get all cryptocurrencies successfully (should return 200)
GET {{baseUrl}}/cryptocurrencies

### 2. Get cryptocurrency by valid ID successfully (should return 200)
GET {{baseUrl}}/cryptocurrencies/{{cryptoId}}

### 3. Get cryptocurrency by invalid ID format (should return 400)
GET {{baseUrl}}/cryptocurrencies/invalid

### 4. Get cryptocurrency by non-numeric ID (should return 400)
GET {{baseUrl}}/cryptocurrencies/abc

### 5. Get cryptocurrency by negative ID (should return 422)
GET {{baseUrl}}/cryptocurrencies/-1

### 6. Get cryptocurrency by non-existent ID (should return 404)
GET {{baseUrl}}/cryptocurrencies/99999

### 7. Get cryptocurrency by zero ID (should return 404)
GET {{baseUrl}}/cryptocurrencies/0

### CREATE CRYPTOCURRENCY TESTS ###

### 8. Create new cryptocurrency successfully (should return 201)
POST {{baseUrl}}/cryptocurrencies
Content-Type: {{contentType}}

{
  "symbol": "TEST",
  "name": "Test Coin",
  "description": "A test cryptocurrency for development",
  "iconUrl": "https://example.com/test-icon.png"
}

### 9. Create cryptocurrency with minimal required fields (should return 201)
POST {{baseUrl}}/cryptocurrencies
Content-Type: {{contentType}}

{
  "symbol": "MIN",
  "name": "Minimal Coin"
}

### 10. Create cryptocurrency with missing required fields (should return 400)
POST {{baseUrl}}/cryptocurrencies
Content-Type: {{contentType}}

{
  "description": "Missing symbol and name"
}

### 11. Create cryptocurrency with missing symbol (should return 400)
POST {{baseUrl}}/cryptocurrencies
Content-Type: {{contentType}}

{
  "name": "Missing Symbol Coin"
}

### 12. Create cryptocurrency with missing name (should return 400)
POST {{baseUrl}}/cryptocurrencies
Content-Type: {{contentType}}

{
  "symbol": "MSN"
}

### 13. Create cryptocurrency with malformed JSON (should return 400)
POST {{baseUrl}}/cryptocurrencies
Content-Type: {{contentType}}

{
  "symbol": "BAD",
  "name": "Bad JSON",
}

### 14. Create cryptocurrency without authentication (should return 401)
POST {{baseUrl}}/cryptocurrencies
Content-Type: {{contentType}}
Cookie: 

{
  "symbol": "UNAUTH",
  "name": "Unauthorized Coin"
}

### 15. Create cryptocurrency with duplicate symbol (should return 409)
POST {{baseUrl}}/cryptocurrencies
Content-Type: {{contentType}}

{
  "symbol": "BTC",
  "name": "Duplicate Bitcoin"
}

### 16. Create cryptocurrency with invalid symbol format - too long (should return 422)
POST {{baseUrl}}/cryptocurrencies
Content-Type: {{contentType}}

{
  "symbol": "TOOLONGSYMBOL",
  "name": "Invalid Symbol Coin"
}

### 17. Create cryptocurrency with invalid symbol format - too short (should return 422)
POST {{baseUrl}}/cryptocurrencies
Content-Type: {{contentType}}

{
  "symbol": "AB",
  "name": "Too Short Symbol"
}

### 19. Create cryptocurrency with invalid symbol format - numbers (should return 422)
POST {{baseUrl}}/cryptocurrencies
Content-Type: {{contentType}}

{
  "symbol": "123",
  "name": "Numeric Symbol"
}

### 20. Create cryptocurrency with invalid symbol format - special chars (should return 422)
POST {{baseUrl}}/cryptocurrencies
Content-Type: {{contentType}}

{
  "symbol": "BTC@",
  "name": "Special Char Symbol"
}

### 21. Create cryptocurrency with empty name (should return 400)
POST {{baseUrl}}/cryptocurrencies
Content-Type: {{contentType}}

{
  "symbol": "EMPTY",
  "name": ""
}

### UPDATE CRYPTOCURRENCY TESTS ###

### 22. Update cryptocurrency successfully (should return 200)
PUT {{baseUrl}}/cryptocurrencies/{{cryptoId}}
Content-Type: {{contentType}}

{
  "name": "Updated Bitcoin",
  "description": "Updated description for Bitcoin"
}

### 23. Update cryptocurrency with partial data (should return 200)
PUT {{baseUrl}}/cryptocurrencies/{{cryptoId}}
Content-Type: {{contentType}}

{
  "description": "Only updating description"
}

### 24. Update cryptocurrency with invalid data format (should return 400)
PUT {{baseUrl}}/cryptocurrencies/{{cryptoId}}
Content-Type: {{contentType}}

{
  "invalidField": "value"
}

### 25. Update cryptocurrency with invalid ID format (should return 400)
PUT {{baseUrl}}/cryptocurrencies/invalid
Content-Type: {{contentType}}

{
  "name": "Updated Name"
}

### 26. Update cryptocurrency without authentication (should return 401)
PUT {{baseUrl}}/cryptocurrencies/{{cryptoId}}
Content-Type: {{contentType}}
Cookie: 

{
  "name": "Unauthorized Update"
}

### 27. Update cryptocurrency with non-existent ID (should return 404)
PUT {{baseUrl}}/cryptocurrencies/99999
Content-Type: {{contentType}}

{
  "name": "Updated Name"
}

### 28. Update cryptocurrency with conflicting symbol (should return 409)
PUT {{baseUrl}}/cryptocurrencies/{{cryptoId}}
Content-Type: {{contentType}}

{
  "symbol": "ETH"
}

### 29. Update cryptocurrency with invalid symbol format (should return 422)
PUT {{baseUrl}}/cryptocurrencies/{{cryptoId}}
Content-Type: {{contentType}}

{
  "symbol": "toolong"
}

### DELETE CRYPTOCURRENCY TESTS ###

### 30. Delete cryptocurrency with invalid ID format (should return 400)
DELETE {{baseUrl}}/cryptocurrencies/invalid

### 31. Delete cryptocurrency without authentication (should return 401)
DELETE {{baseUrl}}/cryptocurrencies/{{cryptoId}}
Cookie: 

### 32. Try to delete cryptocurrency with dependent data (should return 403)
DELETE {{baseUrl}}/cryptocurrencies/1

### 33. Delete cryptocurrency with non-existent ID (should return 404)
DELETE {{baseUrl}}/cryptocurrencies/99999

### 34. Delete cryptocurrency successfully (should return 200)
# Note: Use this only with a test cryptocurrency that has no dependencies
# DELETE {{baseUrl}}/cryptocurrencies/{{cryptoId}}