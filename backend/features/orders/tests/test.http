### Variables
@baseUrl = http://localhost:8080/api
@contentType = application/json
@orderId = 1

### Login first to get session cookies for authenticated requests
# @name login
POST {{baseUrl}}/login
Content-Type: {{contentType}}

{
  "email": "admin@test.com",
  "password": "test1234"
}

### 1. Get all user orders (authenticated)
GET {{baseUrl}}/order

### 2. Get specific order by ID (authenticated)
GET {{baseUrl}}/order/{{orderId}}

### 3. Get order with invalid ID format (should return 400)
GET {{baseUrl}}/order/invalid

### 4. Get order with non-existent ID (should return 404)
GET {{baseUrl}}/order/999

### 5. Create new limit buy order (authenticated)
POST {{baseUrl}}/order
Content-Type: {{contentType}}

{
  "data": {
    "cryptocurrencyId": 1,
    "orderType": "limit",
    "orderVariant": "buy",
    "quantityTotal": "0.5",
    "price": "50000"
  }
}

### 6. Create new market buy order (authenticated)
POST {{baseUrl}}/order
Content-Type: {{contentType}}

{
  "data": {
    "cryptocurrencyId": 1,
    "orderType": "market",
    "orderVariant": "buy",
    "quantityTotal": "0.1"
  }
}

### 7. Create new limit sell order (authenticated)
POST {{baseUrl}}/order
Content-Type: {{contentType}}

{
  "data": {
    "cryptocurrencyId": 1,
    "orderType": "limit",
    "orderVariant": "sell",
    "quantityTotal": "0.25",
    "price": "60000"
  }
}

### 8. Create order with missing required fields (should return 400)
POST {{baseUrl}}/order
Content-Type: {{contentType}}

{
  "data": {
    "orderType": "limit",
    "orderVariant": "buy"
  }
}

### 9. Create order with invalid cryptocurrency ID (should return 404)
POST {{baseUrl}}/order
Content-Type: {{contentType}}

{
  "data": {
    "cryptocurrencyId": 999,
    "orderType": "limit",
    "orderVariant": "buy",
    "quantityTotal": "0.5",
    "price": "50000"
  }
}

### 10. Create order with insufficient balance (should return 402)
POST {{baseUrl}}/order
Content-Type: {{contentType}}

{
  "data": {
    "cryptocurrencyId": 1,
    "orderType": "limit",
    "orderVariant": "buy",
    "quantityTotal": "1000",
    "price": "100000"
  }
}

### 11. Create limit order without price (should return 422)
POST {{baseUrl}}/order
Content-Type: {{contentType}}

{
  "data": {
    "cryptocurrencyId": 1,
    "orderType": "limit",
    "orderVariant": "buy",
    "quantityTotal": "0.5"
  }
}

### 12. Create order with negative price (should return 422)
POST {{baseUrl}}/order
Content-Type: {{contentType}}

{
  "data": {
    "cryptocurrencyId": 1,
    "orderType": "limit",
    "orderVariant": "buy",
    "quantityTotal": "0.5",
    "price": "-1000"
  }
}

### 13. Update order (authenticated)
PUT {{baseUrl}}/order/{{orderId}}
Content-Type: {{contentType}}

{
  "data": {
    "quantityTotal": "0.75",
    "price": "55000"
  }
}

### 14. Update order with invalid ID (should return 404)
PUT {{baseUrl}}/order/999
Content-Type: {{contentType}}

{
  "data": {
    "price": "55000"
  }
}

### 15. Update order that doesn't belong to user (should return 403)
PUT {{baseUrl}}/order/{{orderId}}
Content-Type: {{contentType}}

{
  "data": {
    "price": "55000"
  }
}

### 16. Update already executed order (should return 409)
PUT {{baseUrl}}/order/{{orderId}}
Content-Type: {{contentType}}

{
  "data": {
    "status": "fully_filled",
    "price": "55000"
  }
}

### 17. Update order with invalid status transition (should return 422)
PUT {{baseUrl}}/order/{{orderId}}
Content-Type: {{contentType}}

{
  "data": {
    "status": "invalid_status"
  }
}

### 18. Delete order (authenticated)
DELETE {{baseUrl}}/order/{{orderId}}

### 19. Delete order with invalid ID (should return 404)
DELETE {{baseUrl}}/order/999

### 20. Delete order that doesn't belong to user (should return 403)
DELETE {{baseUrl}}/order/1

### 21. Delete already executed order (should return 409)
DELETE {{baseUrl}}/order/1

### 22. Test unauthenticated get orders request (should return 401)
GET {{baseUrl}}/order
Cookie: 

### 23. Test unauthenticated create order request (should return 401)
POST {{baseUrl}}/order
Content-Type: {{contentType}}
Cookie: 

{
  "data": {
    "cryptocurrencyId": 1,
    "orderType": "limit",
    "orderVariant": "buy",
    "quantityTotal": "0.5",
    "price": "50000"
  }
}

### 24. Test unauthenticated update order request (should return 401)
PUT {{baseUrl}}/order/1
Content-Type: {{contentType}}
Cookie: 

{
  "data": {
    "price": "55000"
  }
}

### 25. Test unauthenticated delete order request (should return 401)
DELETE {{baseUrl}}/order/1
Cookie: 