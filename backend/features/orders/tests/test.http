### Variables
@baseUrl = http://localhost:8080/api
@contentType = application/json
@orderId = 1

### Login first to get session cookies for authenticated requests
# @name login
POST {{baseUrl}}/login
Content-Type: {{contentType}}

{
  "email": "admin@test.com",
  "password": "test1234"
}

### GET ORDERS TESTS ###image.png

### 1. Get all user orders successfully (should return 200)
GET {{baseUrl}}/order

### 2. Get all orders without authentication (should return 401)
GET {{baseUrl}}/order
Cookie: 

### 3. Get specific order by ID successfully (should return 200)
GET {{baseUrl}}/order/{{orderId}}

### 4. Get order with invalid ID format (should return 400)
GET {{baseUrl}}/order/invalid

### 5. Get order with non-numeric ID (should return 400)
GET {{baseUrl}}/order/abc

### 6. Get order without authentication (should return 401)
GET {{baseUrl}}/order/{{orderId}}
Cookie: 

### 7. Get order that doesn't belong to user (should return 403)
# Note: This would require testing with a different user's order ID

### 8. Get order with non-existent ID (should return 404)
GET {{baseUrl}}/order/99999

### CREATE ORDER TESTS ###

### 9. Create new limit buy order successfully (should return 201)
POST {{baseUrl}}/order
Content-Type: {{contentType}}

{
    "cryptocurrencyId": 1,
    "orderType": "limit",
    "orderVariant": "buy",
    "quantityTotal": "0.05",
    "price": "50000"
}

### 10. Create new market buy order successfully (should return 201)
POST {{baseUrl}}/order
Content-Type: {{contentType}}

{
    "cryptocurrencyId": 1,
    "orderType": "market",
    "orderVariant": "sell",
    "quantityTotal": "0.0001",
    "price": "50000"
}

### 11. Create new limit sell order successfully (should return 201)
POST {{baseUrl}}/order
Content-Type: {{contentType}}

{
    "cryptocurrencyId": 1,
    "orderType": "limit",
    "orderVariant": "sell",
    "quantityTotal": "0.009",
    "price": "60000"
}

### 12. Create order with missing required fields (should return 400)
POST {{baseUrl}}/order
Content-Type: {{contentType}}

{
    "orderType": "limit",
    "orderVariant": "buy"
}

### 13. Create order with malformed JSON (should return 400)
POST {{baseUrl}}/order
Content-Type: {{contentType}}

{
    "cryptocurrencyId": 1,
    "orderType": "limit",
    "orderVariant": "buy",
    "quantityTotal": "0.5",
    "price": "50000",
}

### 14. Create order without authentication (should return 401)
POST {{baseUrl}}/order
Content-Type: {{contentType}}
Cookie: 

{
    "cryptocurrencyId": 1,
    "orderType": "limit",
    "orderVariant": "buy",
    "quantityTotal": "0.5",
    "price": "50000"
}

### 15. Create order with insufficient balance (should return 402)
POST {{baseUrl}}/order
Content-Type: {{contentType}}

{
    "cryptocurrencyId": 1,
    "orderType": "limit",
    "orderVariant": "buy",
    "quantityTotal": "10000",
    "price": "100000"
}

### 16. Create order with invalid cryptocurrency ID (should return 404)
POST {{baseUrl}}/order
Content-Type: {{contentType}}

{
    "cryptocurrencyId": 99999,
    "orderType": "limit",
    "orderVariant": "buy",
    "quantityTotal": "0.5",
    "price": "50000"
}

### 17. Create limit order without price (should return 422)
POST {{baseUrl}}/order
Content-Type: {{contentType}}

{
    "cryptocurrencyId": 1,
    "orderType": "limit",
    "orderVariant": "buy",
    "quantityTotal": "0.5"
}

### 18. Create order with negative price (should return 422)
POST {{baseUrl}}/order
Content-Type: {{contentType}}

{
    "cryptocurrencyId": 1,
    "orderType": "limit",
    "orderVariant": "buy",
    "quantityTotal": "0.5",
    "price": "-1000"
}

### 19. Create order with zero quantity (should return 422)
POST {{baseUrl}}/order
Content-Type: {{contentType}}

{
    "cryptocurrencyId": 1,
    "orderType": "limit",
    "orderVariant": "buy",
    "quantityTotal": "0",
    "price": "50000"
}

### 20. Create order with negative quantity (should return 422)
POST {{baseUrl}}/order
Content-Type: {{contentType}}

{
    "cryptocurrencyId": 1,
    "orderType": "limit",
    "orderVariant": "buy",
    "quantityTotal": "-0.5",
    "price": "50000"
}

### 21. Create order with invalid order type (should return 422)
POST {{baseUrl}}/order
Content-Type: {{contentType}}

{
    "cryptocurrencyId": 1,
    "orderType": "invalid",
    "orderVariant": "buy",
    "quantityTotal": "0.5",
    "price": "50000"
}

### 22. Create order with invalid order variant (should return 422)
POST {{baseUrl}}/order
Content-Type: {{contentType}}

{
    "cryptocurrencyId": 1,
    "orderType": "limit",
    "orderVariant": "invalid",
    "quantityTotal": "0.5",
    "price": "50000"
}

### UPDATE ORDER TESTS ###

### 23. Update order successfully (should return 200)
PUT {{baseUrl}}/order/{{orderId}}
Content-Type: {{contentType}}

{
    "quantityTotal": "0.0075",
    "price": "55000"
}

### 24. Update order with invalid data format (should return 400)
PUT {{baseUrl}}/order/{{orderId}}
Content-Type: {{contentType}}

{
    "invalidField": "value"
}

### 25. Update order without authentication (should return 401)
PUT {{baseUrl}}/order/{{orderId}}
Content-Type: {{contentType}}
Cookie: 

{
    "price": "55000"
}

### 26. Update order that doesn't belong to user (should return 403)
# Note: This requires testing with another user's order

### 27. Update order with non-existent ID (should return 404)
PUT {{baseUrl}}/order/99999
Content-Type: {{contentType}}

{
    "price": "55000"
}

### 28. Update already executed order (should return 409)
# Note: This requires an order that's already been filled

### 29. Update order with invalid status transition (should return 422)
PUT {{baseUrl}}/order/{{orderId}}
Content-Type: {{contentType}}

{
    "status": "invalid_status"
}

### DELETE ORDER TESTS ###

### 30. Delete order successfully (should return 200)
DELETE {{baseUrl}}/order/{{orderId}}

### 31. Delete order with invalid ID format (should return 400)
DELETE {{baseUrl}}/order/invalid

### 32. Delete order without authentication (should return 401)
DELETE {{baseUrl}}/order/1
Cookie: 

### 33. Delete order that doesn't belong to user (should return 403)
# Note: This requires testing with another user's order

### 34. Delete order with non-existent ID (should return 404)
DELETE {{baseUrl}}/order/99999

### 35. Delete already executed/partially filled order (should return 409)
# Note: This requires an order that has been executed or partially filled