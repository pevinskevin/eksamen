### Variables
@baseUrl = http://localhost:8080/api
@contentType = application/json
@orderId = 1

### Login first to get session cookies for authenticated requests
# @name login
POST {{baseUrl}}/login
Content-Type: {{contentType}}

{
  "email": "admin@test.com",
  "password": "test1234"
}

### GET ORDERS TESTS ###

### 1. Get all user orders successfully (should return 200)
GET {{baseUrl}}/order

### 2. Get all orders without authentication (should return 401)
GET {{baseUrl}}/order
Cookie: 

### 3. Get specific limit order by ID successfully (should return 200)
GET {{baseUrl}}/order/limit/{{orderId}}

### 4. Get limit order with invalid ID format (should return 400)
GET {{baseUrl}}/order/limit/invalid

### 5. Get limit order with non-numeric ID (should return 400)
GET {{baseUrl}}/order/limit/abc

### 6. Get limit order without authentication (should return 401)
GET {{baseUrl}}/order/limit/{{orderId}}
Cookie: 

### 7. Get limit order that doesn't belong to user (should return 403)
# Note: This would require testing with a different user's order ID

### 8. Get limit order with non-existent ID (should return 404)
GET {{baseUrl}}/order/limit/99999

### CREATE LIMIT ORDER TESTS ###

### 9. Create new limit buy order successfully (should return 201)
POST {{baseUrl}}/order/limit
Content-Type: {{contentType}}

{
    "cryptocurrencyId": 1,
    "orderVariant": "buy",
    "initialQuantity": "0.005",
    "price": "50000"
}

### 10. Create new limit sell order successfully (should return 201)
POST {{baseUrl}}/order/limit
Content-Type: {{contentType}}

{
    "cryptocurrencyId": 1,
    "orderVariant": "sell",
    "initialQuantity": "0.009",
    "price": "60000"
}

### 11. Create limit order with missing required fields (should return 400)
POST {{baseUrl}}/order/limit
Content-Type: {{contentType}}

{
    "orderVariant": "buy"
}

### 12. Create limit order without authentication (should return 401)
POST {{baseUrl}}/order/limit
Content-Type: {{contentType}}
Cookie: 

{
    "cryptocurrencyId": 1,
    "orderVariant": "buy",
    "initialQuantity": "0.005",
    "price": "50000"
}

### 13. Create limit order with insufficient balance (should return 402)
POST {{baseUrl}}/order/limit
Content-Type: {{contentType}}

{
    "cryptocurrencyId": 1,
    "orderVariant": "buy",
    "initialQuantity": "10000",
    "price": "100000"
}

### 14. Create limit order with invalid cryptocurrency ID (should return 404)
POST {{baseUrl}}/order/limit
Content-Type: {{contentType}}

{
    "cryptocurrencyId": 99999,
    "orderVariant": "buy",
    "initialQuantity": "0.5",
    "price": "50000"
}

### 15. Create limit order without price (should return 400)
POST {{baseUrl}}/order/limit
Content-Type: {{contentType}}

{
    "cryptocurrencyId": 1,
    "orderVariant": "buy",
    "initialQuantity": "0.5"
}

### 16. Create limit order without quantity (should return 400)
POST {{baseUrl}}/order/limit
Content-Type: {{contentType}}

{
    "cryptocurrencyId": 1,
    "orderVariant": "buy",
    "price": "50000"
}

### 17. Create limit order with negative price (should return 400)
POST {{baseUrl}}/order/limit
Content-Type: {{contentType}}

{
    "cryptocurrencyId": 1,
    "orderVariant": "buy",
    "initialQuantity": "0.5",
    "price": "-1000"
}

### 18. Create limit order with zero quantity (should return 422)
POST {{baseUrl}}/order/limit
Content-Type: {{contentType}}

{
    "cryptocurrencyId": 1,
    "orderVariant": "buy",
    "initialQuantity": "0",
    "price": "50000"
}

### 19. Create limit order with negative quantity (should return 400)
POST {{baseUrl}}/order/limit
Content-Type: {{contentType}}

{
    "cryptocurrencyId": 1,
    "orderVariant": "buy",
    "initialQuantity": "-0.5",
    "price": "50000"
}

### 20. Create limit order with invalid order variant (should return 400)
POST {{baseUrl}}/order/limit
Content-Type: {{contentType}}

{
    "cryptocurrencyId": 1,
    "orderVariant": "invalid",
    "initialQuantity": "0.5",
    "price": "50000"
}

### 21. Create limit order with malformed JSON (should return 400)
POST {{baseUrl}}/order/limit
Content-Type: {{contentType}}

{
    "cryptocurrencyId": 1,
    "orderVariant": "buy",
    "initialQuantity": "0.5",
    "price": "50000",
}

### CREATE MARKET ORDER TESTS ###

### 22. Create new market buy order successfully (should return 201)
POST {{baseUrl}}/order/market
Content-Type: {{contentType}}

{
    "cryptocurrencyId": 1,
    "orderVariant": "buy",
    "initialQuantity": "0.1",
    "notionalValue": "5000.00"
}

### 23. Create market order with missing required fields (should return 400)
POST {{baseUrl}}/order/market
Content-Type: {{contentType}}

{
    "orderVariant": "buy"
}

### 24. Create market order without authentication (should return 401)
POST {{baseUrl}}/order/market
Content-Type: {{contentType}}
Cookie: 

{
    "cryptocurrencyId": 1,
    "orderVariant": "buy",
    "initialQuantity": "0.1",
    "notionalValue": "5000.00"
}

### 25. Create market order with insufficient balance (should return 402)
POST {{baseUrl}}/order/market
Content-Type: {{contentType}}

{
    "cryptocurrencyId": 1,
    "orderVariant": "buy",
    "initialQuantity": "0.1",
    "notionalValue": "9999999.00"
}

### 26. Create market order with invalid cryptocurrency ID (should return 404)
POST {{baseUrl}}/order/market
Content-Type: {{contentType}}

{
    "cryptocurrencyId": 99999,
    "orderVariant": "buy",
    "initialQuantity": "0.1",
    "notionalValue": "5000.00"
}

### 27. Create market order without notional value (should return 400)
POST {{baseUrl}}/order/market
Content-Type: {{contentType}}

{
    "cryptocurrencyId": 1,
    "orderVariant": "buy",
    "initialQuantity": "0.1"
}

### 28. Create market order with negative notional value (should return 400)
POST {{baseUrl}}/order/market
Content-Type: {{contentType}}

{
    "cryptocurrencyId": 1,
    "orderVariant": "buy",
    "initialQuantity": "0.1",
    "notionalValue": "-1000.00"
}

### 29. Create market order with zero notional value (should return 422)
POST {{baseUrl}}/order/market
Content-Type: {{contentType}}

{
    "cryptocurrencyId": 1,
    "orderVariant": "buy",
    "initialQuantity": "0",
    "notionalValue": "0"
}

### 30. Create market order with missing quantity (should return 400)
POST {{baseUrl}}/order/market
Content-Type: {{contentType}}

{
    "cryptocurrencyId": 1,
    "orderVariant": "buy",
    "notionalValue": "1000.00"
}

### 31. Create market sell order (should return 201)
POST {{baseUrl}}/order/market
Content-Type: {{contentType}}

{
    "cryptocurrencyId": 1,
    "orderVariant": "sell",
    "initialQuantity": "0.1",
    "notionalValue": "5000.00"
}

### 32. Create market order with invalid order variant (should return 400)
POST {{baseUrl}}/order/market
Content-Type: {{contentType}}

{
    "cryptocurrencyId": 1,
    "orderVariant": "invalid",
    "initialQuantity": "0.1",
    "notionalValue": "5000.00"
}

### 33. Create market order with malformed JSON (should return 400)
POST {{baseUrl}}/order/market
Content-Type: {{contentType}}

{
    "cryptocurrencyId": 1,
    "orderVariant": "buy",
    "initialQuantity": "0.1",
    "notionalValue": "5000.00",
}

### 34. Create market order with price field (should return 400)
POST {{baseUrl}}/order/market
Content-Type: {{contentType}}

{
    "cryptocurrencyId": 1,
    "orderVariant": "buy",
    "initialQuantity": "0.1",
    "notionalValue": "5000.00",
    "price": "50000"
}

### 35. Create market order with all fields (should accept both quantity and notional value)
POST {{baseUrl}}/order/market
Content-Type: {{contentType}}

{
    "cryptocurrencyId": 1,
    "orderVariant": "buy",
    "initialQuantity": "0.1",
    "notionalValue": "5000.00"
}

### UPDATE LIMIT ORDER TESTS ###

### 36. Update limit order successfully (should return 200)
PUT {{baseUrl}}/order/limit/{{orderId}}
Content-Type: {{contentType}}

{
    "price": "55000"
}

### 37. Update limit order with invalid data format (should return 400)
PUT {{baseUrl}}/order/limit/{{orderId}}
Content-Type: {{contentType}}

{
    "invalidField": "value"
}

### 38. Update limit order without authentication (should return 401)
PUT {{baseUrl}}/order/limit/{{orderId}}
Content-Type: {{contentType}}
Cookie: 

{
    "price": "55000"
}

### 39. Update limit order that doesn't belong to user (should return 403)
# Note: This requires testing with another user's order

### 40. Update limit order with non-existent ID (should return 404)
PUT {{baseUrl}}/order/limit/99999
Content-Type: {{contentType}}

{
    "price": "55000"
}

### 41. Update already executed limit order (should return 404)
PUT {{baseUrl}}/order/limit/29
Content-Type: {{contentType}}

{
    "price": "55000"
}

### 42. Update limit order with invalid status transition (should return 400)
PUT {{baseUrl}}/order/limit/{{orderId}}
Content-Type: {{contentType}}

{
    "status": "invalid_status"
}

### 43. Update limit order with invalid ID format (should return 400)
PUT {{baseUrl}}/order/limit/invalid
Content-Type: {{contentType}}

{
    "price": "55000"
}

### DELETE LIMIT ORDER TESTS ###

### 44. Delete limit order successfully (should return 200)
DELETE {{baseUrl}}/order/limit/{{orderId}}

### 45. Delete limit order with invalid ID format (should return 400)
DELETE {{baseUrl}}/order/limit/invalid

### 46. Delete limit order without authentication (should return 401)
DELETE {{baseUrl}}/order/limit/1
Cookie: 

### 47. Delete limit order that doesn't belong to user (should return 403)
# Note: This requires testing with another user's order

### 48. Delete limit order with non-existent ID (should return 404)
DELETE {{baseUrl}}/order/limit/99999

### 49. Delete already executed/partially filled limit order (should return 404)
# Note: This requires an order that has been executed or partially filled

### EDGE CASE TESTS ###

### 53. Test market order endpoint with PUT (should return 404/405)
PUT {{baseUrl}}/order/market/{{orderId}}
Content-Type: {{contentType}}

{
    "notionalValue": "6000.00"
}

### 54. Test market order endpoint with DELETE (should return 404/405)
DELETE {{baseUrl}}/order/market/{{orderId}}

### 55. Create limit order with notionalValue field (should return 400)
POST {{baseUrl}}/order/limit
Content-Type: {{contentType}}

{
    "cryptocurrencyId": 1,
    "orderVariant": "buy",
    "initialQuantity": "0.005",
    "price": "50000",
    "notionalValue": "1000.00"
}

### 56. Large notional value market order (stress test)
POST {{baseUrl}}/order/market
Content-Type: {{contentType}}

{
    "cryptocurrencyId": 1,
    "orderVariant": "buy",
    "initialQuantity": "0.1",
    "notionalValue": "999999.99"
}

### 57. Very small valid limit order
POST {{baseUrl}}/order/limit
Content-Type: {{contentType}}

{
    "cryptocurrencyId": 1,
    "orderVariant": "buy",
    "initialQuantity": "0.00001",
    "price": "1"
}

### 58. Very small valid market order
POST {{baseUrl}}/order/market
Content-Type: {{contentType}}

{
    "cryptocurrencyId": 1,
    "orderVariant": "buy",
    "initialQuantity": "0.01",
    "notionalValue": "1.00"
}