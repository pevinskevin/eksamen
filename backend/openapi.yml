openapi: 3.1.0
info:
  title: Cryptocurrency Exchange API
  description: API for a simulated cryptocurrency exchange platform
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com

servers:
  - url: http://localhost:8080/api
    description: Development server

paths:
  /register:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegistration"
      responses:
        "201":
          description: User successfully registered
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /login:
    post:
      summary: User login
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginCredentials"
      responses:
        "200":
          description: Login successful
          headers:
            Set-Cookie:
              schema:
                type: string
                description: Session cookie
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /logout:
    post:
      summary: User logout
      tags:
        - Authentication
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Successfully logged out

  /account/balances:
    get:
      summary: Get user's fiat and crypto balances
      tags:
        - Account
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Balances retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountBalances"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /account/crypto/{symbol}:
    get:
      summary: Get specific crypto holding by symbol
      tags:
        - Account
      security:
        - cookieAuth: []
      parameters:
        - name: symbol
          in: path
          required: true
          schema:
            type: string
            example: BTC
      responses:
        "200":
          description: Crypto holding retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CryptoHolding"
        "404":
          description: Crypto holding not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /cryptocurrencies:
    get:
      summary: Get all cryptocurrencies
      tags:
        - Cryptocurrencies
      responses:
        "200":
          description: List of cryptocurrencies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Cryptocurrency"

    post:
      summary: Create new cryptocurrency
      tags:
        - Cryptocurrencies
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCryptocurrency"
      responses:
        "201":
          description: Cryptocurrency created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cryptocurrency"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /cryptocurrencies/{id}:
    get:
      summary: Get cryptocurrency by ID
      tags:
        - Cryptocurrencies
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Cryptocurrency details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cryptocurrency"
        "404":
          description: Cryptocurrency not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    put:
      summary: Update cryptocurrency
      tags:
        - Cryptocurrencies
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateCryptocurrency"
      responses:
        "200":
          description: Cryptocurrency updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cryptocurrency"
        "404":
          description: Cryptocurrency not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      summary: Delete cryptocurrency
      tags:
        - Cryptocurrencies
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Cryptocurrency deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "404":
          description: Cryptocurrency not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /order/:
    get:
      summary: Get all user orders
      tags:
        - Orders
      security:
        - cookieAuth: []
      responses:
        "200":
          description: List of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"

    post:
      summary: Create new order
      tags:
        - Orders
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateOrder"
      responses:
        "201":
          description: Order created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Invalid order data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /order/{id}:
    get:
      summary: Get specific order by ID
      tags:
        - Orders
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Order details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "404":
          description: Order not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    put:
      summary: Update order
      tags:
        - Orders
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateOrder"
      responses:
        "200":
          description: Order updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "404":
          description: Order not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      summary: Delete order
      tags:
        - Orders
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Order deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "404":
          description: Order not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: connect.sid

  schemas:
    UserRegistration:
      type: object
      required:
        - firstName
        - lastName
        - email
        - password
        - repeatPassword
      properties:
        firstName:
          type: string
          minLength: 1
        lastName:
          type: string
          minLength: 1
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
        repeatPassword:
          type: string
          minLength: 8

    LoginCredentials:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    LoginResponse:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        role:
          type: string
          enum: [user, admin]

    User:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        role:
          type: string
          enum: [user, admin]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    AccountBalances:
      type: object
      properties:
        fiatAccount:
          type: object
          properties:
            id:
              type: integer
              description: account_id from database
            currencyCode:
              type: string
              example: SIM_USD
            balance:
              type: number
              format: decimal
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time
        cryptoHoldings:
          type: array
          items:
            $ref: "#/components/schemas/CryptoHolding"

    CryptoHolding:
      type: object
      properties:
        id:
          type: integer
          description: holding_id from database
        userId:
          type: integer
        cryptocurrencyId:
          type: integer
        symbol:
          type: string
        name:
          type: string
        description:
          type: string
        iconUrl:
          type: string
        balance:
          type: number
          format: decimal
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Cryptocurrency:
      type: object
      properties:
        id:
          type: integer
        symbol:
          type: string
        name:
          type: string
        description:
          type: string
        iconUrl:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateCryptocurrency:
      type: object
      required:
        - symbol
        - name
      properties:
        symbol:
          type: string
        name:
          type: string
        description:
          type: string
        iconUrl:
          type: string

    UpdateCryptocurrency:
      type: object
      properties:
        symbol:
          type: string
        name:
          type: string
        description:
          type: string
        iconUrl:
          type: string

    Order:
      type: object
      properties:
        id:
          type: integer
          description: order_id from database
        userId:
          type: integer
        cryptocurrencyId:
          type: integer
        orderType:
          type: string
          enum: [limit, market]
        orderVariant:
          type: string
          enum: [buy, sell]
        quantityTotal:
          type: number
          format: decimal
          description: Total quantity of the order
        quantityRemaining:
          type: number
          format: decimal
          description: Remaining unfilled quantity
        price:
          type: number
          format: decimal
          description: Price per unit (null for market orders)
        status:
          type: string
          enum: [open, partially_filled, fully_filled, cancelled]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateOrder:
      type: object
      required:
        - cryptocurrencyId
        - orderType
        - orderVariant
        - quantityTotal
      properties:
        cryptocurrencyId:
          type: integer
        orderType:
          type: string
          enum: [limit, market]
        orderVariant:
          type: string
          enum: [buy, sell]
        quantityTotal:
          type: number
          format: decimal
          minimum: 0
        price:
          type: number
          format: decimal
          minimum: 0
          description: Required for limit orders, ignored for market orders

    UpdateOrder:
      type: object
      properties:
        quantityTotal:
          type: number
          format: decimal
          minimum: 0
        price:
          type: number
          format: decimal
          minimum: 0
        status:
          type: string
          enum: [open, partially_filled, fully_filled, cancelled]

    Trade:
      type: object
      properties:
        id:
          type: integer
          description: trade_id from database
        buyOrderId:
          type: integer
        sellOrderId:
          type: integer
        cryptocurrencyId:
          type: integer
        quantity:
          type: number
          format: decimal
        price:
          type: number
          format: decimal
        buyerUserId:
          type: integer
        sellerUserId:
          type: integer
        tradeTimestamp:
          type: string
          format: date-time

    Transaction:
      type: object
      properties:
        id:
          type: integer
          description: transaction_id from database
        userId:
          type: integer
        type:
          type: string
          enum:
            [deposit_fiat, withdrawal_fiat, deposit_crypto, withdrawal_crypto]
        currencyCodeOrCryptoId:
          type: string
          description: Currency code for fiat or crypto symbol
        amount:
          type: number
          format: decimal
        status:
          type: string
          enum: [pending, completed, failed]
        externalTransactionId:
          type: string
          description: External reference ID
        timestamp:
          type: string
          format: date-time

    Error:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        details:
          type: object

tags:
  - name: Authentication
    description: User authentication endpoints
  - name: Account
    description: User account management
  - name: Cryptocurrencies
    description: Cryptocurrency management
  - name: Orders
    description: Order management
