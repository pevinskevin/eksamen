openapi: 3.1.0
info:
  title: Cryptocurrency Exchange API
  description: API for a simulated cryptocurrency exchange platform
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com

servers:
  - url: http://localhost:8080/api
    description: Development server

paths:
  /register:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegistration"
      responses:
        "201":
          description: User successfully registered
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "ValidationError"
                message: "Missing required fields"
        "409":
          description: Conflict (email already exists)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "ConflictError"
                message: "Email already exists"
        "422":
          description: Unprocessable Entity (validation errors)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "ValidationError"
                message: "Password must be at least 8 characters long"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "InternalServerError"
                message: "Database connection failed"

  /login:
    post:
      summary: User login
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginCredentials"
            example:
              email: "admin@test.com"
              password: "test1234"
      responses:
        "200":
          description: Login successful
          headers:
            Set-Cookie:
              schema:
                type: string
                description: Session cookie
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "400":
          description: Bad Request (missing fields)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "BadRequestError"
                message: "Email and password are required"
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "AuthenticationError"
                message: "Invalid email or password"
        "422":
          description: Unprocessable Entity (validation errors)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "ValidationError"
                message: "Invalid email format"
        "429":
          description: Too Many Requests (rate limiting)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "RateLimitError"
                message: "Too many login attempts. Please try again later"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "InternalServerError"
                message: "Authentication service unavailable"

  /logout:
    post:
      summary: User logout
      tags:
        - Authentication
      responses:
        "200":
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Successfully logged out
        "400":
          description: Bad Request (no active session)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "BadRequestError"
                message: "No active session to logout"
        "500":
          description: Internal server error during logout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "InternalServerError"
                message: "Failed to destroy session"

  /account/balances:
    get:
      summary: Get user's fiat and crypto balances
      tags:
        - Account
      # security:
      # - cookieAuth: []
      responses:
        "200":
          description: Balances retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountBalances"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "AuthenticationError"
                message: "Authentication required"
        "404":
          description: Not Found (user account not found)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "NotFoundError"
                message: "User account not found"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "InternalServerError"
                message: "Failed to retrieve account balances"

  /account/crypto/{symbol}:
    get:
      summary: Get specific crypto holding by symbol
      tags:
        - Account
      # security:
      # - cookieAuth: []
      parameters:
        - name: symbol
          in: path
          required: true
          schema:
            type: string
            example: BTC
      responses:
        "200":
          description: Crypto holding retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CryptoHolding"
        "400":
          description: Bad Request (invalid symbol format)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "ValidationError"
                message: "Invalid cryptocurrency symbol format"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "AuthenticationError"
                message: "Authentication required"
        "404":
          description: Crypto holding not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "NotFoundError"
                message: "Cryptocurrency holding not found for this user"
        "422":
          description: Unprocessable Entity (invalid symbol validation)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "ValiError"
                message: "Symbol must be 3-5 uppercase letters only (no numbers or special characters)"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "InternalServerError"
                message: "Failed to retrieve crypto holding"

  /cryptocurrencies:
    get:
      summary: Get all cryptocurrencies
      tags:
        - Cryptocurrencies
      responses:
        "200":
          description: List of cryptocurrencies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Cryptocurrency"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "InternalServerError"
                message: "Failed to retrieve cryptocurrencies"

    post:
      summary: Create new cryptocurrency
      tags:
        - Cryptocurrencies
      # security:
      # - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCryptocurrency"
      responses:
        "201":
          description: Cryptocurrency created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cryptocurrency"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "ValidationError"
                message: "Missing required fields: symbol and name"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "AuthenticationError"
                message: "Admin authentication required"
        "409":
          description: Conflict (symbol already exists)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "ConflictError"
                message: "Cryptocurrency symbol already exists"
        "422":
          description: Unprocessable Entity (validation errors)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "ValiError"
                message: "Symbol must be 3-5 uppercase letters only (no numbers or special characters)"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "InternalServerError"
                message: "Failed to create cryptocurrency"

  /cryptocurrencies/{id}:
    get:
      summary: Get cryptocurrency by ID
      tags:
        - Cryptocurrencies
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Cryptocurrency details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cryptocurrency"
        "400":
          description: Bad Request (invalid ID format)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "ValidationError"
                message: "Invalid cryptocurrency ID format"
        "404":
          description: Cryptocurrency not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "NotFoundError"
                message: "Cryptocurrency not found"
        "422":
          description: Unprocessable Entity (ID validation errors)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "ValiError"
                message: "ID must be a positive integer (greater than 0)"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "InternalServerError"
                message: "Failed to retrieve cryptocurrency"

    put:
      summary: Update cryptocurrency
      tags:
        - Cryptocurrencies
      # security:
      # - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateCryptocurrency"
      responses:
        "200":
          description: Cryptocurrency updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cryptocurrency"
        "400":
          description: Bad Request (invalid data)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "ValidationError"
                message: "Invalid request data format"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "AuthenticationError"
                message: "Authentication required"
        "404":
          description: Cryptocurrency not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "NotFoundError"
                message: "Cryptocurrency not found"
        "409":
          description: Conflict (symbol already taken)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "ConflictError"
                message: "Symbol already taken by another cryptocurrency"
        "422":
          description: Unprocessable Entity (validation errors)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "ValiError"
                message: "Symbol must be 3-5 uppercase letters only (no numbers or special characters)"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "InternalServerError"
                message: "Failed to update cryptocurrency"

    delete:
      summary: Delete cryptocurrency
      tags:
        - Cryptocurrencies
      # security:
      # - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Cryptocurrency deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cryptocurrency"
        "400":
          description: Bad Request (invalid ID)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "ValidationError"
                message: "Invalid cryptocurrency ID"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "AuthenticationError"
                message: "Authentication required"
        "403":
          description: Forbidden (cannot delete - has dependent data)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "ForbiddenError"
                message: "Cannot delete cryptocurrency with existing orders or holdings"
        "404":
          description: Cryptocurrency not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "NotFoundError"
                message: "Cryptocurrency not found"
        "422":
          description: Unprocessable Entity (ID validation errors)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "ValiError"
                message: "ID must be a positive integer (greater than 0)"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "InternalServerError"
                message: "Failed to delete cryptocurrency"

  /order:
    get:
      summary: Get all user orders
      tags:
        - Orders
      # security:
      # - cookieAuth: []
      responses:
        "200":
          description: List of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "AuthenticationError"
                message: "Authentication required"
        "404":
          description: Not Found (user account not found)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "NotFoundError"
                message: "User account not found"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "InternalServerError"
                message: "Failed to retrieve orders"

  /order/limit:
    post:
      summary: Create new limit order
      tags:
        - Orders
      # security:
      # - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateLimitOrder"
      responses:
        "201":
          description: Limit order created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Invalid order data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "ValidationError"
                message: "Missing required limit order fields"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "AuthenticationError"
                message: "Authentication required"
        "402":
          description: Payment Required (insufficient balance)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "InsufficientFundsError"
                message: "Insufficient balance to place order"
        "404":
          description: Not Found (cryptocurrency not found)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "NotFoundError"
                message: "Cryptocurrency not found"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "ValidationError"
                message: "Price must be positive for limit orders"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "InternalServerError"
                message: "Failed to create limit order"

  /order/market:
    post:
      summary: Create new market order
      tags:
        - Orders
      # security:
      # - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateMarketOrder"
      responses:
        "201":
          description: Market order created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Invalid order data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "ValidationError"
                message: "Missing required market order fields"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "AuthenticationError"
                message: "Authentication required"
        "402":
          description: Payment Required (insufficient balance)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "InsufficientFundsError"
                message: "Insufficient balance to place order"
        "404":
          description: Not Found (cryptocurrency not found)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "NotFoundError"
                message: "Cryptocurrency not found"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "ValidationError"
                message: "Notional value must be positive for market orders"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "InternalServerError"
                message: "Failed to create market order"

  /order/limit/{id}:
    get:
      summary: Get specific limit order by ID
      tags:
        - Orders
      # security:
      # - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Limit order details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Bad Request (invalid ID format)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "ValidationError"
                message: "Invalid order ID format"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "AuthenticationError"
                message: "Authentication required"
        "403":
          description: Forbidden (not user's order or not a limit order)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "ForbiddenError"
                message: "Access denied - not your limit order"
        "404":
          description: Limit order not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "NotFoundError"
                message: "Limit order not found"
        "422":
          description: Unprocessable Entity (ID validation errors)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "ValiError"
                message: "ID must be a positive integer (greater than 0)"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "InternalServerError"
                message: "Failed to retrieve limit order"

    put:
      summary: Update limit order
      tags:
        - Orders
      # security:
      # - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateOrder"
      responses:
        "200":
          description: Limit order updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Bad Request (invalid data)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "ValidationError"
                message: "Invalid update data format"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "AuthenticationError"
                message: "Authentication required"
        "402":
          description: Payment Required (insufficient balance)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "InsufficientFundsError"
                message: "Updated order value exceeds available balance"
        "403":
          description: Forbidden (not user's order or not a limit order)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "ForbiddenError"
                message: "Access denied - not your limit order"
        "404":
          description: Limit order not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "NotFoundError"
                message: "Limit order not found"
        "409":
          description: Conflict (order already executed)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "ConflictError"
                message: "Cannot modify executed limit order"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "ValidationError"
                message: "Invalid order status transition"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "InternalServerError"
                message: "Failed to update limit order"

    delete:
      summary: Delete limit order
      tags:
        - Orders
      # security:
      # - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Limit order deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "400":
          description: Bad Request (invalid ID)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "ValidationError"
                message: "Invalid order ID"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "AuthenticationError"
                message: "Authentication required"
        "403":
          description: Forbidden (not user's order or not a limit order)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "ForbiddenError"
                message: "Access denied - not your limit order"
        "404":
          description: Limit order not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "NotFoundError"
                message: "Limit order not found"
        "409":
          description: Conflict (order already executed/partially filled)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "ConflictError"
                message: "Cannot delete partially filled or executed limit order"
        "422":
          description: Unprocessable Entity (ID validation errors)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "ValiError"
                message: "ID must be a positive integer (greater than 0)"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "InternalServerError"
                message: "Failed to delete limit order"

components:
  securitySchemes:
    {}
    # cookieAuth:
    #   type: apiKey
    #   in: cookie
    #   name: connect.sid

  schemas:
    # Reusable enum definitions (for reference - actual schemas use inline enums for readability)
    UserRole:
      type: string
      enum: [user, admin]

    OrderType:
      type: string
      enum: [limit, market]

    OrderVariant:
      type: string
      enum: [buy, sell]

    OrderStatus:
      type: string
      enum: [open, partially_filled, fully_filled, cancelled]

    TransactionType:
      type: string
      enum: [deposit_fiat, withdrawal_fiat, deposit_crypto, withdrawal_crypto]

    TransactionStatus:
      type: string
      enum: [pending, completed, failed]

    UserRegistration:
      type: object
      additionalProperties: false
      required:
        - firstName
        - lastName
        - email
        - password
        - repeatPassword
      properties:
        firstName:
          type: string
          minLength: 1
        lastName:
          type: string
          minLength: 1
        email:
          type: string
        password:
          type: string
          description: "User password. Must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, and one number."
          example: "SecurePass123"
        repeatPassword:
          type: string
          description: "Password confirmation. Must match the password field exactly."
          example: "SecurePass123"

    LoginCredentials:
      type: object
      additionalProperties: false
      required:
        - email
        - password
      properties:
        email:
          type: string
        password:
          type: string

    LoginResponse:
      type: object
      additionalProperties: false
      properties:
        id:
          type: integer
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        role:
          type: string
          enum: [user, admin]

    User:
      type: object
      additionalProperties: false
      properties:
        id:
          type: integer
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        role:
          type: string
          enum: [user, admin]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    AccountBalances:
      type: object
      additionalProperties: false
      properties:
        fiatAccount:
          type: object
          additionalProperties: false
          properties:
            id:
              type: integer
              description: Account ID
            currencyCode:
              type: string
              example: SIM_USD
            balance:
              type: string
              format: decimal
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time
        cryptoHoldings:
          type: array
          items:
            $ref: "#/components/schemas/CryptoHolding"

    CryptoHolding:
      type: object
      additionalProperties: false
      properties:
        id:
          type: integer
          description: Crypto holding ID
        userId:
          type: integer
        cryptocurrencyId:
          type: integer
        symbol:
          type: string
        name:
          type: string
        description:
          type: string
        iconUrl:
          type: string
        balance:
          type: string
          format: decimal
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Cryptocurrency:
      type: object
      additionalProperties: false
      properties:
        id:
          type: integer
        symbol:
          type: string
        name:
          type: string
        description:
          type: string
        iconUrl:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateCryptocurrency:
      type: object
      additionalProperties: false
      required:
        - symbol
        - name
      properties:
        symbol:
          type: string
          description: "Cryptocurrency symbol. Must be 3-5 uppercase letters only (no numbers or special characters)"
          example: "BTC"
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: "Full name of the cryptocurrency"
          example: "Bitcoin"
        description:
          type: string
          maxLength: 500
          description: "Optional description of the cryptocurrency"
          example: "The first and most well-known cryptocurrency"
        iconUrl:
          type: string
          format: uri
          maxLength: 500
          description: "Optional URL to the cryptocurrency icon"
          example: "https://example.com/btc-icon.png"

    UpdateCryptocurrency:
      type: object
      additionalProperties: false
      properties:
        symbol:
          type: string
          description: "Cryptocurrency symbol. Must be 3-5 uppercase letters only (no numbers or special characters)"
          example: "BTC"
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: "Full name of the cryptocurrency"
          example: "Bitcoin"
        description:
          type: string
          maxLength: 500
          description: "Optional description of the cryptocurrency"
          example: "The first and most well-known cryptocurrency"
        iconUrl:
          type: string
          format: uri
          maxLength: 500
          description: "Optional URL to the cryptocurrency icon"
          example: "https://example.com/btc-icon.png"

    Order:
      type: object
      additionalProperties: false
      properties:
        id:
          type: integer
          description: Order ID
        userId:
          type: integer
        cryptocurrencyId:
          type: integer
        orderType:
          type: string
          enum: [limit, market]
        orderVariant:
          type: string
          enum: [buy, sell]
        initialQuantity:
          type: string
          format: decimal
          description: Initial quantity of the order (null for market orders)
          nullable: true
        remainingQuantity:
          type: string
          format: decimal
          description: Remaining unfilled quantity (null for market orders until filled)
          nullable: true
        price:
          type: string
          format: decimal
          description: Price per unit (null for market orders)
          nullable: true
        notionalValue:
          type: string
          format: decimal
          description: Notional value for market orders (null for limit orders)
          nullable: true
        status:
          type: string
          enum: [open, partially_filled, fully_filled, cancelled]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateLimitOrder:
      type: object
      additionalProperties: false
      required:
        - cryptocurrencyId
        - orderVariant
        - initialQuantity
        - price
      properties:
        cryptocurrencyId:
          type: integer
          description: ID of the cryptocurrency to trade
          example: 1
        orderVariant:
          type: string
          enum: [buy, sell]
          description: Whether this is a buy or sell order
          example: "buy"
        initialQuantity:
          type: string
          format: decimal
          description: Quantity of cryptocurrency to trade
          example: "0.5"
        price:
          type: string
          format: decimal
          description: Price per unit for the limit order
          example: "50000.00"

    CreateMarketOrder:
      type: object
      additionalProperties: false
      required:
        - cryptocurrencyId
        - orderVariant
        - initialQuantity
        - notionalValue
      properties:
        cryptocurrencyId:
          type: integer
          description: ID of the cryptocurrency to trade
          example: 1
        orderVariant:
          type: string
          enum: [buy, sell]
          description: Whether this is a buy or sell order
          example: "buy"
        initialQuantity:
          type: string
          format: decimal
          description: Quantity of cryptocurrency for the market order
          example: "0.1"
        notionalValue:
          type: string
          format: decimal
          description: Total dollar amount for the market order
          example: "1000.00"

    # Legacy schema for backward compatibility
    CreateOrder:
      type: object
      additionalProperties: false
      required:
        - cryptocurrencyId
        - orderType
        - orderVariant
        - quantityTotal
        - price
      properties:
        cryptocurrencyId:
          type: integer
        orderType:
          type: string
          enum: [limit, market]
        orderVariant:
          type: string
          enum: [buy, sell]
        quantityTotal:
          type: string
          format: decimal
        price:
          type: string
          format: decimal
          description: Required for limit orders, ignored for market orders

    UpdateOrder:
      type: object
      additionalProperties: false
      properties:
        initialQuantity:
          type: string
          format: decimal
          description: Updated quantity for the limit order
        price:
          type: string
          format: decimal
          description: Updated price for the limit order
        status:
          type: string
          enum: [open, partially_filled]
          description: Updated status for the order

    Trade:
      type: object
      additionalProperties: false
      properties:
        id:
          type: integer
          description: Trade ID
        buyOrderId:
          type: integer
        sellOrderId:
          type: integer
        cryptocurrencyId:
          type: integer
        quantity:
          type: string
          format: decimal
        price:
          type: string
          format: decimal
        buyerUserId:
          type: integer
        sellerUserId:
          type: integer
        tradeTimestamp:
          type: string
          format: date-time

    Transaction:
      type: object
      additionalProperties: false
      properties:
        id:
          type: integer
          description: Transaction ID
        userId:
          type: integer
        type:
          type: string
          enum:
            [deposit_fiat, withdrawal_fiat, deposit_crypto, withdrawal_crypto]
        currencyCodeOrCryptoId:
          type: string
          description: Currency code for fiat or crypto symbol
        amount:
          type: string
          format: decimal
        status:
          type: string
          enum: [pending, completed, failed]
        externalTransactionId:
          type: string
          description: External reference ID
        timestamp:
          type: string
          format: date-time

    Error:
      type: object
      additionalProperties: false
      required:
        - error
        - message
      properties:
        error:
          type: string
          example: "ValidationError"
        message:
          type: string
          example: "Invalid email format"

tags:
  - name: Authentication
    description: User authentication endpoints
  - name: Account
    description: User account management
  - name: Cryptocurrencies
    description: Cryptocurrency management
  - name: Orders
    description: Order management
