# Task ID: 10
# Title: FE: Display Account Balances
# Status: in-progress
# Dependencies: 6, 9
# Priority: high
# Description: Create Svelte components to display the authenticated user's fiat and cryptocurrency balances, fetched from the backend API.
# Details:
Create an `AccountDashboard.svelte` or similar component. When the component mounts and the user is authenticated, use `fetch` to GET data from `/account/balances`. Display the balances clearly, separating fiat and different cryptocurrencies.

# Test Strategy:
Logged-in user sees their correct fiat and crypto balances displayed. If no balances, an appropriate message is shown. Updates if balances change (e.g., after a trade, to be tested later).

# Subtasks:
## 1. Create Account Dashboard Component Shell [pending]
### Dependencies: None
### Description: Develop the basic structure for the `AccountDashboard.svelte` component (or equivalent for the chosen frontend framework). This component will serve as the container for displaying account balances.
### Details:
Focus on creating the file, basic HTML/Svelte structure, and any necessary initial styling placeholders. No data fetching or display logic at this stage.

## 2. Implement Balance Fetching Logic [pending]
### Dependencies: 10.1
### Description: Implement the client-side logic to make authenticated API calls to the backend to retrieve the user's fiat and crypto account balances. This includes handling API responses and errors.
### Details:
This logic might reside within the `AccountDashboard.svelte` component (e.g., in its script section or a lifecycle function) or in a separate service/store that the component consumes. Ensure proper handling of authentication tokens and API error states (e.g., network issues, unauthorized).

## 3. Display Balances in UI with Edge Case Handling [pending]
### Dependencies: 10.1, 10.2
### Description: Integrate the fetched balance data into the `AccountDashboard.svelte` component's template. Clearly display the various fiat and crypto balances, and implement UI to handle cases such as zero balances, non-existent balances (if applicable), loading states, and error states from fetching.
### Details:
Consider formatting for currency and cryptocurrency values. Implement user-friendly messages for loading, errors, or when no balances are available. Ensure the UI is responsive and accessible.

