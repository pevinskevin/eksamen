# Task ID: 9
# Title: BE: Account & CryptoHolding Models & Balance API
# Status: pending
# Dependencies: 2, 4
# Priority: high
# Description: Implement backend models for `Accounts` (fiat) and `CryptoHoldings` (crypto). Create API endpoints for authenticated users to fetch their balances. Implement logic to seed initial simulated fiat (e.g., SIM_USD) and/or crypto balances for new users upon registration or first login.
# Details:
Create `/account/balances` GET endpoint, protected by auth middleware. This endpoint should query `Accounts` and `CryptoHoldings` tables for the logged-in user (`req.user.id`). Return a consolidated list of balances. Implement logic (e.g., during user registration or a separate seeding function) to give new users a starting amount of 'SIM_USD' in their `Accounts` table and potentially some base simulated crypto in `CryptoHoldings`.

# Test Strategy:
Authenticated users can fetch their balances via the API. New users should have default seeded balances. Balances should reflect database state.

# Subtasks:
## 1. Implement Account and CryptoHolding Database Models & Services [done]
### Dependencies: None
### Description: Define database schemas and implement service layer logic for `Accounts` (fiat) and `CryptoHoldings` (crypto).
### Details:
This includes defining all necessary fields, relationships, data types, and basic CRUD operations for both models. `Accounts` will manage fiat currency balances (e.g., SIM_USD), and `CryptoHoldings` will manage cryptocurrency balances.

## 2. Create Authenticated GET API for User Balances [pending]
### Dependencies: 9.1
### Description: Develop an authenticated GET API endpoint (e.g., `/account/balances`) to fetch combined fiat and crypto balances for the logged-in user.
### Details:
The endpoint must integrate with the authentication system. It will query the `Accounts` and `CryptoHoldings` data, aggregating balances for the specific user making the request.

## 3. Implement New User Initial Balance Seeding Logic [pending]
### Dependencies: 9.1
### Description: Develop the backend logic to automatically seed initial fiat (e.g., SIM_USD) and/or crypto balances for new users upon successful registration.
### Details:
This logic should be triggered during the user registration process. Specify the default amounts and types of currencies/cryptocurrencies to be credited to new user accounts.

## 4. Ensure Correct User ID Filtering in Balance API Queries [pending]
### Dependencies: 9.2
### Description: Implement and verify that all API queries for fetching balances correctly join and filter data by `user_id` to ensure data integrity and security.
### Details:
This involves rigorous testing of the `/account/balances` endpoint to confirm that it only returns data belonging to the authenticated user, preventing any cross-user data exposure. Review query construction for `Accounts` and `CryptoHoldings`.

