# Task ID: 19
# Title: BE: Real-time Order Book Broadcasting
# Status: pending
# Dependencies: 14, 16, 18
# Priority: high
# Description: Implement a real-time broadcasting system for a hybrid order book. This hybrid order book combines user orders (local internal orders from platform users) and Binance order book data (external market liquidity). When changes occur (user order added/cancelled/filled, trade executed, or Binance data updates), the system must broadcast the complete hybrid order book state via WebSockets to all connected and subscribed frontend clients. This ensures transparency, allowing users to see both internal order activity and external market liquidity, potentially in a layered display.
# Details:
1. **Hybrid Order Book Construction:**
    *   Develop logic within `OrderBookService.js` or a new dedicated module to construct and maintain the hybrid order book.
    *   This involves integrating local user orders with real-time data fetched from the Binance order book (e.g., via Task 18: BE: Binance Order Book Integration).
    *   The broadcast data should facilitate a layered display where user orders are visible alongside or integrated with Binance market depth.

2.  **Triggering Updates:**
    *   The system must react to changes from multiple sources:
        *   Local user order events: new order, cancellation, fill (partial or full) from `User Order Management` (Task 16).
        *   Internal trade executions from the `MatchingEngine.js`.
        *   Updates from the Binance order book data stream (Task 18).

3.  **Broadcasting Mechanism:**
    *   Utilize the WebSocket infrastructure (Task 14: BE: WebSocket Setup).
    *   After any relevant change, serialize the *complete current state* of the hybrid order book for the specific trading pair.
    *   Broadcast this data to clients subscribed to that pair.

4.  **Data Format:**
    *   Define a clear WebSocket message format. A suggested format that supports layered display:
        `{ type: 'HYBRID_ORDER_BOOK_UPDATE', pair: 'SIM_BTC/SIM_USD', data: { bids: [{price, qty, source: 'user'|'binance'}, ...], asks: [{price, qty, source: 'user'|'binance'}, ...] } }`
    *   The `source` attribute will help the frontend distinguish between user orders and Binance liquidity for the layered display.

5.  **Integration Points:**
    *   Ensure `MatchingEngine.js` and `OrderBookService.js` correctly trigger updates to the hybrid order book and its subsequent broadcast.
    *   Leverage Task 18 for the source of Binance data.
    *   Leverage Task 14 for the WebSocket broadcasting mechanism.
    *   Leverage Task 16 for user order events.

# Test Strategy:
1. Verify that frontend clients receive WebSocket messages when the hybrid order book changes for a subscribed pair.
2. Confirm that updates are triggered by:
    *   New user orders.
    *   User order cancellations.
    *   User order fills (trades).
    *   Updates from the Binance order book data stream.
3. The data received by the client must accurately reflect the complete current state of the hybrid order book on the server, clearly distinguishing between user orders and Binance liquidity (e.g., via a 'source' field).
4. Test scenarios with varying levels of user orders and Binance market depth to ensure correct merging and broadcasting.
5. Ensure the broadcast data structure supports the intended layered display on the frontend.

# Subtasks:
## 19_1. Design hybrid order book data structure and WebSocket message format [pending]
### Dependencies: None
### Description: Define the in-memory structure for the hybrid order book (combining user and Binance orders) and the precise JSON format for WebSocket messages broadcasting these updates. Ensure the format supports distinguishing order sources for layered display.
### Details:


## 19_2. Implement hybrid order book merging logic [pending]
### Dependencies: None
### Description: Develop logic in `OrderBookService.js` or a new module to merge local user orders with incoming Binance order book data to form and maintain the consolidated hybrid order book.
### Details:


## 19_3. Integrate user order events for hybrid book updates [pending]
### Dependencies: None
### Description: Modify event handling for user order changes (add, cancel, fill) in `MatchingEngine.js` or `OrderBookService.js` to trigger updates and re-broadcasting of the hybrid order book.
### Details:


## 19_4. Integrate Binance data feed for hybrid book updates [pending]
### Dependencies: None
### Description: Connect the Binance data feed (from Task 18) to the hybrid order book module, ensuring that updates from the external market trigger recalculation and re-broadcasting of the hybrid order book.
### Details:


## 19_5. Implement WebSocket broadcasting of hybrid order book [pending]
### Dependencies: None
### Description: Implement the mechanism to serialize the complete hybrid order book state and broadcast it via WebSockets to subscribed clients upon any relevant change.
### Details:


## 19_6. Develop tests for hybrid order book broadcasting [pending]
### Dependencies: None
### Description: Write unit and integration tests covering hybrid order book construction, update triggers from both user and Binance sources, and WebSocket broadcasting accuracy and data format.
### Details:


