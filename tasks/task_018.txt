# Task ID: 18
# Title: BE: Trade Execution & State Updates
# Status: pending
# Dependencies: 9, 11, 17
# Priority: high
# Description: Implement the backend logic for trade execution. All trades are user executions against Binance, which acts as the sole counterparty, price oracle, and liquidity provider. This system processes matched limit orders (from Task 17) and market orders directly against Binance. There are no user-to-user settlements. The system must atomically update only the user's balances, create a `Trade` record with Binance (via a system account) as the counterparty, and update the user's `Order` record (status, quantity) in the database and in-memory order book. Market orders require execution at simulated Binance prices with pre-trade balance validation. Atomicity of database operations is critical.
# Details:
The core responsibility is to process user trades exclusively against Binance liquidity. This involves atomic database updates for the user's balances, trade record creation (with Binance as counterparty), and order status management. Market order execution at simulated Binance prices with balance validation is a key feature.

**Key Requirements:**
1.  **Binance as Sole Counterparty:** All trades are user orders filled against Binance liquidity. No user-to-user settlements.
2.  **User-Only Balance Updates:** The system updates only the participating user's currency and asset balances. Binance's side is represented by a system account in trade records.
3.  **Trade Record:** A `Trade` record is created for every execution, with `buyer_id` or `seller_id` being the user, and the other being a designated system account ID for Binance. Include `trade_type`='EXTERNAL_LIQUIDITY_TRADE'.
4.  **Atomic Database Operations:** All database changes for a trade (user balance updates, trade creation, order updates) must be within a single transaction.
5.  **Order Status Management:** User's `Order` records (status, quantity remaining) are updated in the database and reflected in the in-memory order book.
6.  **Market Order Execution:** Support market orders executed at simulated Binance prices. This includes:
    *   Fetching/determining the current execution price (simulated).
    *   Pre-execution validation of user's available balance (quote currency for buy, base asset for sell).

**Detailed Process:**

**I. Pre-Execution & Validation:**
    1.  Receive trade execution request:
        *   For limit orders: From matching engine (Task 17) with matched price and quantity.
        *   For market orders: Direct request with asset and quantity (or total quote value for buy).
    2.  For market orders:
        *   Fetch current simulated execution price from a Binance price feed/oracle.
        *   Perform balance validation:
            *   Buy: Ensure user has sufficient quote currency (`price * quantity`).
            *   Sell: Ensure user has sufficient base asset (`quantity`).
        *   If validation fails, reject the order and notify the user.
    3.  Start a database transaction.

**II. Trade Execution Logic (User vs. Binance):**
    1.  **Identify User and Trade Details:** User ID, asset, quantity, price (fixed for limit, fetched for market).
    2.  **Update User Balances (Atomically):**
        *   **If user is BUYING base asset:**
            *   Debit user's quote currency account by `price * quantity`.
            *   Credit user's base currency holdings by `quantity`.
        *   **If user is SELLING base asset:**
            *   Credit user's quote currency account by `price * quantity`.
            *   Debit user's base currency holdings by `quantity`.
    3.  **Persist Balance Changes:** Save updates to user's `Accounts` and `CryptoHoldings` tables.
    4.  **Create Trade Record:** Insert a new record into the `Trades` table:
        *   `buyer_id`: User's ID if buying, Binance system account ID if user is selling.
        *   `seller_id`: User's ID if selling, Binance system account ID if user is buying.
        *   `crypto_id`, `quantity`, `price`, `timestamp`, `trade_type` ('EXTERNAL_LIQUIDITY_TRADE').
    5.  **Update Order Record (Database & In-Memory):**
        *   For limit orders: Update status (e.g., 'PARTIALLY_FILLED', 'FILLED'), decrease `quantity_remaining`.
        *   For market orders: Mark the corresponding (transient or persisted) order as 'FILLED'.
        *   Reflect changes in the in-memory order book if applicable (for limit orders).

**III. Post-Execution:**
    1.  **Commit Transaction:** If all operations succeed.
    2.  **Rollback on Failure:** If any operation fails (including balance validation if part of the transaction).
    3.  **Event Emission:** Emit events like `TradeExecuted`, `BalanceUpdated`, `OrderUpdated`.

# Test Strategy:
The test strategy must cover trade execution against Binance as the sole counterparty, including market order specifics.

1.  **Trade Execution Verification (User vs. Binance):**
    *   **User Buys Base Asset (Limit/Market):**
        *   Verify user's quote currency debited, base currency credited.
        *   Verify `Trade` record: user as `buyer_id`, Binance system account as `seller_id`, `trade_type`='EXTERNAL_LIQUIDITY_TRADE', correct details.
    *   **User Sells Base Asset (Limit/Market):**
        *   Verify user's quote currency credited, base currency debited.
        *   Verify `Trade` record: user as `seller_id`, Binance system account as `buyer_id`, `trade_type`='EXTERNAL_LIQUIDITY_TRADE', correct details.
    *   For both:
        *   Verify `Order` status and `quantity_remaining` updated in DB and in-memory (for limit orders).
        *   Verify market orders are marked 'FILLED'.
2.  **Market Order Specific Tests:**
    *   **Balance Validation:**
        *   Market Buy: Test execution with sufficient quote currency; test rejection if insufficient.
        *   Market Sell: Test execution with sufficient base currency; test rejection if insufficient.
    *   **Price Simulation:** Verify trades use the simulated Binance price for market orders.
3.  **Atomicity Tests:**
    *   Simulate failures during trade execution (e.g., post-debit, pre-credit; pre-trade record).
    *   Verify transaction rollback and consistent system state.
4.  **Concurrency Tests:**
    *   Test concurrent limit and market order executions for data integrity (balances, order states).
5.  **Edge Cases:**
    *   Partial fills (limit orders).
    *   Trades with very small/large quantities/prices.
    *   Market orders consuming exactly available balance.

# Subtasks:
## 18_S1. Define/Update `Trades` table schema to represent Binance as the sole counterparty (e.g., using a designated system account ID) and include `trade_type` (e.g., 'EXTERNAL_LIQUIDITY_TRADE'). [pending]
### Dependencies: None
### Description: 
### Details:


## 18_S2. Implement the trade execution service entry point to handle matched limit orders (from Task 17) and incoming market order requests. [pending]
### Dependencies: None
### Description: 
### Details:


## 18_S3. Implement core trade execution logic: atomically update only the user's balances, create `Trade` record (user vs. Binance system account), update user's `Order` record (DB & in-memory, if applicable). [pending]
### Dependencies: None
### Description: 
### Details:


## 18_S4. Implement robust database transaction management for all trade execution operations to ensure atomicity. [pending]
### Dependencies: None
### Description: 
### Details:


## 18_S5. Implement event emission (e.g., `TradeExecuted`, `BalanceUpdated`, `OrderUpdated`) upon successful trade execution. [pending]
### Dependencies: None
### Description: 
### Details:


## 18_S6. Implement market order processing: fetch simulated Binance prices, perform pre-execution user balance validation, and integrate with trade execution logic. [pending]
### Dependencies: None
### Description: 
### Details:


