# Task ID: 16
# Title: BE: In-Memory Order Book Implementation
# Status: in-progress
# Dependencies: 11, 12
# Priority: high
# Description: Develop a trading simulation engine that uses Binance WebSocket data as a price oracle. The implementation will be phased: Phase 1 focuses on basic market order execution against Binance's best bid/ask, trade recording, and notifications. Phase 2 introduces handling of order book depth for market orders, implements limit order execution logic, and enhances data structures. Phase 3 will focus on visualizing the impact of user trades on a representation of the Binance order book. This system simulates trading against Binance prices, without implementing user-to-user matching or a complex hybrid order book. The `binance-ws.js` module will be the primary component for Binance integration.
# Details:
The project is divided into three phases:

**Phase 1: Basic Trading Engine (Target: 15-20 hours)**
1.  **Binance Price Oracle Integration:**
    *   Extend `binance-ws.js` to subscribe to Binance's ticker or best bid/ask streams (e.g., `symbol@bookTicker`).
    *   Maintain a real-time local cache of the current best bid and ask prices from Binance for simulated trading pairs.
2.  **Market Order Execution (Basic):**
    *   Implement logic to accept user market orders (buy/sell).
    *   Market orders execute *immediately* at the currently cached best bid (for sells) or best ask (for buys) from Binance.
    *   Assume sufficient liquidity at the best bid/ask for simplicity in this phase.
3.  **Trade Recording:**
    *   Store executed trades in a database, including details like pair, side (buy/sell), quantity, execution price, timestamp, and user ID.
4.  **Basic WebSocket Notifications:**
    *   Implement basic WebSocket notifications to users upon trade execution (e.g., order filled).

**Phase 2: Add Depth & Sophistication (Target: +10-15 hours)**
1.  **Binance Order Book Depth Integration:**
    *   Enhance `binance-ws.js` to subscribe to Binance's full or partial depth WebSocket streams (e.g., `symbol@depth5`, `symbol@depth@100ms`).
    *   Maintain a local, synchronized copy of the relevant levels of the Binance order book (bids and asks).
2.  **Market Order Execution (Depth-Aware):**
    *   Modify market order execution logic to "walk the book". If an order's quantity exceeds liquidity at the best price, it consumes subsequent price levels from the local Binance order book copy until filled.
    *   Calculate the volume-weighted average price (VWAP) for such executions.
3.  **Limit Order Implementation:**
    *   Implement logic to accept user limit orders (buy/sell) with a specified price and quantity.
    *   Store pending limit orders.
    *   Continuously monitor the live Binance price stream (best bid/ask or depth).
    *   Execute limit orders when the market price reaches the order's limit price.
4.  **Enhanced Order Management:**
    *   Implement order status updates (pending, partially_filled, filled, cancelled).
    *   Allow users to cancel pending limit orders.

**Phase 3: Visual Order Book Magic (Target: +20-25 hours)**
1.  **Simulated Order Book State:**
    *   Develop data structures to represent a *simulated* view of the Binance order book that reflects the *impact* of user trades within the simulation.
    *   When a user trade "consumes" liquidity from a Binance price level, this simulated view should show reduced quantity at that level for that user's perspective.
2.  **Real-time Order Book Display Logic:**
    *   Implement backend logic to provide data for a UI to display this simulated order book.
    *   The display should update in real-time as Binance prices change and as user trades "consume" liquidity.
3.  **Visual Feedback of Market Consumption:**
    *   Ensure the simulated order book clearly visualizes how user market orders "eat through" Binance liquidity levels. This is a personalized visual representation of *their* impact and does not affect other users' execution prices.

# Test Strategy:
**Phase 1 Tests:**
1.  Verify `binance-ws.js` correctly subscribes to and caches Binance best bid/ask prices.
2.  Test market order placement: ensure they execute immediately at the correct current Binance best bid/ask.
3.  Verify trade details (price, quantity, side, timestamp) are correctly recorded in the database.
4.  Test WebSocket notifications for trade executions.

**Phase 2 Tests:**
1.  Verify `binance-ws.js` correctly synchronizes with Binance depth streams, maintaining an accurate local copy of order book levels.
2.  Test depth-aware market order execution:
    a. Orders smaller than best level liquidity fill at best price.
    b. Orders larger than best level liquidity walk the book and fill at multiple levels, with correct VWAP.
    c. Handle partial fills if order quantity exceeds available simulated depth.
3.  Test limit order placement: ensure they are stored as pending.
4.  Test limit order execution:
    a. Buy limit orders trigger when Binance ask price reaches or drops below the limit.
    b. Sell limit orders trigger when Binance bid price reaches or rises above the limit.
    c. Verify execution against appropriate book depth if needed.
5.  Test cancellation of pending limit orders.
6.  Verify order status updates (pending, filled, partially_filled, cancelled) are accurate.

**Phase 3 Tests:**
1.  Verify the simulated order book data structure correctly initializes with live Binance data.
2.  Test that after a user's simulated market order executes, the corresponding quantities in the *simulated* order book view are reduced accordingly for that user's perspective.
3.  Test that the simulated order book updates in real-time based on incoming Binance price level changes.
4.  Ensure the data provided for UI display accurately reflects the "consumed" liquidity from user trades.
5.  Confirm that one user's simulated consumption does not alter the execution prices for other users (who still trade against the live Binance book).

# Subtasks:
## 1. Phase 1: Setup Binance Price Oracle (`binance-ws.js` extension) [done]
### Dependencies: None
### Description: Extend `binance-ws.js` to subscribe to Binance's ticker or best bid/ask streams (e.g., `symbol@bookTicker`) and maintain a real-time local cache of current best bid/ask prices.
### Details:
Focus on efficient subscription and reliable caching of best bid/ask for multiple trading pairs. This forms the basis for Phase 1 executions.
<info added on 2025-06-01T17:05:45.354Z>
CLARIFICATION NEEDED: Before proceeding with implementation, need to confirm architecture approach with user.
CURRENT UNDERSTANDING (from Task 16):
- This is NOT a traditional user-to-user order book
- This IS a trading simulation against Binance liquidity
- Users trade against Binance prices (Binance as counterparty)
- Visual order book shows Binance data with consumption feedback
- Three phases: Basic execution → Depth-aware → Visual impact
QUESTION FOR USER: Confirm this Binance-simulation approach vs traditional order matching before continuing implementation.
</info added on 2025-06-01T17:05:45.354Z>

## 2. Phase 1: Implement Basic Market Order Execution [in-progress]
### Dependencies: 16.1
### Description: Implement logic for user market orders (buy/sell) to execute immediately at the cached Binance best bid/ask. Assume sufficient liquidity at this price level for Phase 1.
### Details:
Handle order requests, use cached prices from subtask 1 for execution. Calculate execution price and filled quantity. This is a simplified execution model.

## 3. Phase 1: Implement Trade Recording & Basic Notifications [pending]
### Dependencies: 16.2
### Description: Store executed trades from subtask 2 in a database. Implement basic WebSocket notifications to users upon trade execution.
### Details:
Database schema for trades (pair, side, quantity, price, timestamp, user_id). Simple WebSocket message for 'order filled' status.

## 4. Phase 2: Binance Order Book Depth Integration (`binance-ws.js` enhancement) [pending]
### Dependencies: 16.1
### Description: Enhance `binance-ws.js` to subscribe to Binance's depth WebSocket streams (e.g., `symbol@depth5` or `symbol@depth@100ms`) and maintain a local, synchronized copy of Binance order book levels.
### Details:
Handle initial snapshot and differential updates for depth streams. Ensure data structures for local Binance book are efficient for updates and reads by the execution engine.

## 5. Phase 2: Implement Depth-Aware Market Order Execution [pending]
### Dependencies: 16.2, 16.4
### Description: Modify market order execution to 'walk the book'. If an order's quantity exceeds liquidity at one price level, it consumes subsequent levels from the local Binance order book copy until filled or liquidity exhausted. Calculate VWAP.
### Details:
Use depth data from subtask 4. Handle partial fills if order quantity exceeds available simulated depth. Calculate Volume-Weighted Average Price for multi-level fills.

## 6. Phase 2: Implement Limit Order Logic [pending]
### Dependencies: 16.2, 16.4
### Description: Implement placement of user limit orders (buy/sell). Monitor the live Binance price stream (best bid/ask or depth) and execute limit orders when market conditions meet order criteria, potentially walking the book.
### Details:
Store pending limit orders. Logic to check trigger conditions (e.g., Binance best ask <= limit buy price). Execution may consume multiple depth levels similar to market orders (subtask 5).

## 7. Phase 2: Implement Order Management (Status, Cancellation) [pending]
### Dependencies: 16.6
### Description: Implement comprehensive order status updates (e.g., pending, partially_filled, filled, cancelled). Allow users to cancel their pending limit orders.
### Details:
Update order state throughout its lifecycle. Ensure cancellations correctly remove orders from active consideration. Handle partial fills for both market (subtask 5) and limit orders (subtask 6).

## 8. Phase 3: Design & Implement Simulated Order Book State for Visual Impact [pending]
### Dependencies: 16.4, 16.5, 16.6
### Description: Develop data structures and server-side logic to maintain a *simulated* view of the Binance order book. This view should reflect the *impact* of the current user's trades by showing reduced quantities at price levels they 'consumed'.
### Details:
This is not for matching, but for user-specific visual feedback. Initialize from live Binance data (subtask 4). Update based on user's executed trades (subtasks 5, 6). This state is transient or user-session specific.

## 9. Phase 3: Backend for Real-time Visual Order Book Display [pending]
### Dependencies: 16.8
### Description: Implement backend API endpoints or WebSocket messages to provide data for a UI to display the simulated order book (from subtask 8). This should show market consumption in real-time.
### Details:
Expose the simulated order book state. Ensure data can be pushed or polled for real-time UI updates, reflecting both Binance market changes and the user's simulated trade impacts.

